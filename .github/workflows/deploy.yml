# Nome do seu fluxo de trabalho
name: Deploy to GitHub Pages

# Define quando esta automação deve rodar
on:
  # Roda toda vez que você envia código para a branch 'main'
  push:
    branches: [ "master" ]

# Permissões necessárias para que a Action possa publicar no GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Define as tarefas (jobs) que serão executadas
jobs:
  build-and-deploy:
    # Usa a versão mais recente do Ubuntu como ambiente
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código do seu repositório para o ambiente da Action
      - name: Checkout
        uses: actions/checkout@v4

      # 2. A MÁGICA ACONTECE AQUI: Cria o arquivo firebase-config.js
      - name: Create Firebase Config File
        run: |
          echo "const firebaseConfig = {" > firebase-config.js
          echo "  apiKey: '${{ secrets.FIREBASE_API_KEY }}'," >> firebase-config.js
          echo "  authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}'," >> firebase-config.js
          echo "  projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'," >> firebase-config.js
          echo "  storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}'," >> firebase-config.js
          echo "  messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'," >> firebase-config.js
          echo "  appId: '${{ secrets.FIREBASE_APP_ID }}'," >> firebase-config.js
          echo "  appId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}'" >> firebase-config.js
          echo "};" >> firebase-config.js

      # 3. Configura o ambiente para o deploy no GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 4. Compila os arquivos do site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Define a pasta que contém seu site (a raiz, no nosso caso)
          path: '.'

      # 5. Faz o deploy para o GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4